services:
  traefik:
    image: traefik:v2.10
    restart: unless-stopped
    network_mode: host
    volumes:
      - traefik_logs:/var/log
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      # Docker provider
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      # Entrypoints
      - "--entrypoints.web.address=:80"
      # Logs
      - "--log.level=DEBUG"
      - "--log.filePath=/var/log/traefik.log"
      - "--accesslog=true"
      - "--accesslog.filepath=/var/log/access.log"
      - "--accesslog.format=json"

  central_app:
    build:
      context: ..
      dockerfile: docker/central.dockerfile
    restart: unless-stopped
    networks:
      - web
    environment:
      - DB_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - PORT=${CENTRAL_PORT:-3000}
      - API_HOST=http://api_server:${API_PORT:-3000}
      - ORIGIN=http://central.${DOMAIN:?err}
      - NODE_ENV=dev
    expose:
      - ${CENTRAL_PORT:-3000}
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.central-service.loadbalancer.server.port=${CENTRAL_PORT:-3000}"
      - "traefik.http.routers.central.rule=Host(`central.${DOMAIN}`)"
      - "traefik.http.routers.central.service=central-service"
      - "traefik.http.routers.central.entrypoints=web"

  api_server:
    build:
      context: ..
      dockerfile: docker/api.dockerfile
    restart: unless-stopped
    networks:
      - web
    volumes:
      - api_storage:/app/storage
    environment:
      - DB_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - NODE_ENV=dev
      - PORT=${API_PORT:-3000}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-10}
      - ROOT_DIR=${ROOT_DIR:-/app}
      - RATE_LIMITS=${RATE_LIMITS:-50}
      - RATE_WINDOW=${RATE_WINDOW:-900000}
    expose:
      - ${API_PORT:-3000}
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.internal-only.ipwhitelist.sourceRange=172.20.0.0/16"
      - "traefik.http.services.api-service.loadbalancer.server.port=${API_PORT:-3000}"
      - "traefik.http.routers.api-internal.rule=Host(`api.${DOMAIN}`) && PathPrefix(`/stores`)"
      - "traefik.http.routers.api-internal.service=api-service"
      - "traefik.http.routers.api-internal.middlewares=internal-only@docker"
      - "traefik.http.routers.api-internal.entrypoints=web"
      - "traefik.http.routers.api-public.rule=Host(`api.${DOMAIN}`) && !PathPrefix(`/stores`)"
      - "traefik.http.routers.api-public.service=api-service"
      - "traefik.http.routers.api-public.entrypoints=web"

  migrator:
    build:
      context: ..
      dockerfile: docker/migrator.dockerfile
    networks:
      - web
    environment:
      - DB_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - ADMIN_USERNAME=${ADMIN_USERNAME:?err}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:?err}
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:16
    restart: unless-stopped
    expose:
      - 5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER:?err}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?err}
      - POSTGRES_DB=${POSTGRES_DB:?err}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - web
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  web:
    name: web
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

volumes:
  postgres_data:
  api_storage:
  traefik_logs:
